{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "(v10.1) AWS CFT to deploy a FGCP based Active-Passive HA solution with two FortiGates in two AZs",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "New VPC Configuration"
					},
					"Parameters": [
						"VPCCIDR",
						"AZForSubnet1",
						"AZForSubnet2",
						"PublicSubnet1",
						"PrivateSubnet1",
						"HAMgmtSubnet1",
						"PublicSubnet2",
						"PrivateSubnet2",
						"HAMgmtSubnet2",
						"TgwAttach",
						"TgwAttachSubnet1",
						"TgwAttachSubnet2"
					]
				},
				{
					"Label": {
						"default": "TGW Configuration"
					},
					"Parameters": [
						"TgwCreation",
						"TgwExisting",
						"TgwExistingSecurityTgwRtb",
						"TgwExistingSpokeTgwRtb",
						"TgwExistingSpokeTgwRtbRoute"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"InstanceType",
						"CIDRForInstanceAccess",
						"KeyPair",
						"EncryptVolumes",
						"OnlyPrivateEC2API",
						"InitS3Bucket",
						"FortiOSVersion",
						"LicenseType",
						"FortiGate1LicenseFile",
						"FortiGate2LicenseFile",
						"FortiGate1FortiFlexToken",
						"FortiGate2FortiFlexToken",
						"PublicSubnet1RouterIP",
						"PrivateSubnet1RouterIP",
						"HAMgmtSubnet1RouterIP",
						"PublicSubnet2RouterIP",
						"PrivateSubnet2RouterIP",
						"HAMgmtSubnet2RouterIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate 1"
					},
					"Parameters": [
						"FortiGate1PublicIP",
						"FortiGate1PrivateIP",
						"FortiGate1HAmgmtIP"
					]
				},
				{
					"Label": {
						"default": "Interface IP Configuration for FortiGate 2"
					},
					"Parameters": [
						"FortiGate2PublicIP",
						"FortiGate2PrivateIP",
						"FortiGate2HAmgmtIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCCIDR": {
			"Type": "String",
			"Default": "10.0.0.0/16",
			"Description": "Provide a network CIDR for the new VPC"
		},
		"AZForSubnet1": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for the first set of new subnets"
		},
		"AZForSubnet2": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select an Availability Zone for the second set of new subnets"
		},
		"PublicSubnet1": {
			"Type": "String",
			"Default": "10.0.1.0/24",
			"Description": "[Provide a network CIDR for PublicSubnet1"
		},
		"PrivateSubnet1": {
			"Type": "String",
			"Default": "10.0.2.0/24",
			"Description": "Provide a network CIDR for PrivateSubnet1"
		},
		"HAMgmtSubnet1": {
			"Type": "String",
			"Default": "10.0.3.0/24",
			"Description": "Provide a network CIDR for HAMgmtSubnet1"
		},
		"PublicSubnet2": {
			"Type": "String",
			"Default": "10.0.10.0/24",
			"Description": "Provide a network CIDR for PublicSubnet2"
		},
		"PrivateSubnet2": {
			"Type": "String",
			"Default": "10.0.20.0/24",
			"Description": "Provide a network CIDR for PrivateSubnet2"
		},
		"HAMgmtSubnet2": {
			"Type": "String",
			"Default": "10.0.30.0/24",
			"Description": "Provide a network CIDR for HAMgmtSubnet2"
		},
		"TgwAttach": {
			"Type": "String",
			"Description": "Select Yes if you plan to attach this VPC to Transit GW with a VPC attachment.  If Yes is selected 2 additional subnets and a route table will be created",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"TgwAttachSubnet1": {
			"Type": "String",
			"Default": "10.0.4.0/24",
			"Description": "Provide a network CIDR for TgwAttachSubnet1"
		},
		"TgwAttachSubnet2": {
			"Type": "String",
			"Default": "10.0.40.0/24",
			"Description": "Provide a network CIDR for TgwAttachSubnet2"
		},
		"TgwCreation": {
			"Type": "String",
			"Description": "Select Yes if you want to deploy a new Transit GW and two Transit GW Route Tables",
			"AllowedValues": [
				"Yes",
				"No"
			]
		},
		"TgwExisting": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide the Transit GW ID to create VPC routes to reach it"
		},
		"TgwExistingSecurityTgwRtb": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide the Transit GW RouteTable ID for the security VPC to associate to"
		},
		"TgwExistingSpokeTgwRtb": {
			"Type": "String",
			"Description": "[Leave blank if an existing TGW will not be used] If you are using an existing Transit GW, provide the Transit GW RouteTable ID that your spoke VPCs are associated with"
		},
		"TgwExistingSpokeTgwRtbRoute": {
			"Type": "String",
			"Description": "[Ignore if an existing TGW will not be used, leave blank if not needed in existing tgw setup] If you are using an existing Transit GW, provide a network CIDR to create a route in your Transit GW RouteTable that your spoke VPCs are associated with (ie 10.0.0.0/8 or 0.0.0.0/0)"
		},
		"PublicSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.1.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet1)"
		},
		"PrivateSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.2.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet1)"
		},
		"HAMgmtSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.3.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from HAMgmtSubnet1)"
		},
		"PublicSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.10.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PublicSubnet2)"
		},
		"PrivateSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.20.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from PrivateSubnet2)"
		},
		"HAMgmtSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.30.1",
			"Description": "Provide the IP address of the AWS intrinsic router (First IP from HAMgmtSubnet2)"
		},
		"FortiGate1PublicIP": {
			"Type": "String",
			"Default": "10.0.1.10/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate1 (IP from PublicSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate1PrivateIP": {
			"Type": "String",
			"Default": "10.0.2.10/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate1 (IP from PrivateSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate1HAmgmtIP": {
			"Type": "String",
			"Default": "10.0.3.10/24",
			"Description": "Provide the IP address in CIDR form for the ha management interface of FortiGate1 (IP from HAMgmtSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate2PublicIP": {
			"Type": "String",
			"Default": "10.0.10.10/24",
			"Description": "Provide the IP address in CIDR form for the public interface of FortiGate2 (IP from PublicSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate2PrivateIP": {
			"Type": "String",
			"Default": "10.0.20.10/24",
			"Description": "Provide the IP address in CIDR form for the private interface of FortiGate2 (IP from PrivateSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"FortiGate2HAmgmtIP": {
			"Type": "String",
			"Default": "10.0.30.10/24",
			"Description": "Provide the IP address in CIDR form for the ha management interface of FortiGate2 (IP from HAMgmtSubnet1)",
			"AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
			"ConstraintDescription": "must be a valid CIDR block format."
		},
		"InstanceType": {
			"Type": "String",
			"Default": "c6i.xlarge",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"c5.large",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge",
				"c5n.large",
				"c5n.xlarge",
				"c5n.2xlarge",
				"c5n.4xlarge",
				"c5n.9xlarge",
				"c5n.18xlarge",
				"c6i.large",
				"c6i.xlarge",
				"c6i.2xlarge",
				"c6i.4xlarge",
				"c6i.8xlarge",
				"c6i.16xlarge",
				"c6i.24xlarge",
				"c6in.large",
				"c6in.xlarge",
				"c6in.2xlarge",
				"c6in.4xlarge",
				"c6in.8xlarge",
				"c6in.16xlarge",
				"c6g.large",
				"c6g.xlarge",
				"c6g.2xlarge",
				"c6g.4xlarge",
				"c6g.8xlarge",
				"c6g.16xlarge",
				"c6gn.large",
				"c6gn.xlarge",
				"c6gn.2xlarge",
				"c6gn.4xlarge",
				"c6gn.8xlarge",
				"c6gn.16xlarge",
				"c7g.large",
				"c7g.xlarge",
				"c7g.2xlarge",
				"c7g.4xlarge",
				"c7g.8xlarge",
				"c7g.16xlarge",
				"c7gn.large",
				"c7gn.xlarge",
				"c7gn.2xlarge",
				"c7gn.4xlarge",
				"c7gn.8xlarge",
				"c7gn.16xlarge"
			]
		},
		"CIDRForInstanceAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Provide a network CIDR from which the FortiGate instances will be accessed"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select a keypair to associate with the FortiGates"
		},
		"EncryptVolumes": {
			"Type": "String",
			"Description": "Select 'true' to encrypt the FortiGate instances OS and Log volumes with your account's KMS default master key for EBS.  Otherwise select false to leave unencrypted",
			"AllowedValues": [
				"true",
				"false"
			]
		},
		"OnlyPrivateEC2API": {
			"Type": "String",
			"Default": "False",
			"Description": "Select if only private EC2 API access is allowed for HAMgmt interfaces.  ***Note*** No EIP will be assigned to the HAMgmmt interfaces.  Login via the floating Cluster EIP or directly to each VM with the private IP of the HAMgmt interface.",
			"AllowedValues": [
				"True",
				"False"
			]
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the Init S3 Bucket name, where your config files will be created  *** the bucket should exist in the same region as this deployment for successful bootstrapping ***"
		},
		"FortiOSVersion": {
			"Type": "String",
			"Default": "7.2.x",
			"Description": "Select the version of FortiOS to use (latest GA AMI will be used)",
			"AllowedValues": [
				"7.0.x",
				"7.2.x",
				"7.4.x"
			]
		},
		"LicenseType": {
			"Type": "String",
			"Description": "Select the license type for the FortiGates",
			"AllowedValues": [
				"BYOL",
				"Flex",
				"PAYG"
			]
		},
		"FortiGate1LicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank otherwise] Provide the name of the BYOL license file in the Init S3 Bucket for FortiGate1 (ie fgt1.lic or prefix/fgt1.lic)"
		},
		"FortiGate2LicenseFile": {
			"Type": "String",
			"Description": "[BYOL Only, leave blank otherwise] Provide the name of the BYOL license file in the Init S3 Bucket for FortiGate2 (ie fgt2.lic or prefix/fgt2.lic)"
		},
		"FortiGate1FortiFlexToken": {
			"Type": "String",
			"Description": "[Flex Only, leave blank otherwise] Provide the FortiFlex Token for FortiGate1 (ie 1A2B3C4D5E6F7G8H9I0J)"
		},
		"FortiGate2FortiFlexToken": {
			"Type": "String",
			"Description": "[Flex Only, leave blank otherwise] Provide the FortiFlex Token for FortiGate2 (ie 2B3C4D5E6F7G8H9I0J1K)"
		}
	},
	"Mappings": {
		"FortiOSIntelAMISearchString": {
			"6.4.x": {
				"BYOL": "FortiGate-VM64-AWS *(6.4.*)*",
				"Flex": "FortiGate-VM64-AWS *(6.4.*)*",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(6.4.*)*"
			},
			"7.0.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.0.*)*",
				"Flex": "FortiGate-VM64-AWS *(7.0.*)*",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.0.*)*"
			},
			"7.2.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.2.*)*",
				"Flex": "FortiGate-VM64-AWS *(7.2.*)*",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.2.*)*"
			},
			"7.4.x": {
				"BYOL": "FortiGate-VM64-AWS *(7.4.*)*",
				"Flex": "FortiGate-VM64-AWS *(7.4.*)*",
				"PAYG": "FortiGate-VM64-AWSONDEMAND *(7.4.*)*"
			}
		},
		"FortiOSArmAMISearchString": {
			"6.4.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(6.4.*)*",
				"Flex": "FortiGate-VMARM64-AWS *(6.4.*)*",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(6.4.*)*"
			},
			"7.0.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.0.*)*",
				"Flex": "FortiGate-VMARM64-AWS *(7.0.*)*",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.0.*)*"
			},
			"7.2.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.2.*)*",
				"Flex": "FortiGate-VMARM64-AWS *(7.2.*)*",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.2.*)*"
			},
			"7.4.x": {
				"BYOL": "FortiGate-VMARM64-AWS *(7.4.*)*",
				"Flex": "FortiGate-VMARM64-AWS *(7.4.*)*",
				"PAYG": "FortiGate-VMARM64-AWSONDEMAND *(7.4.*)*"
			}
		}
	},
	"Conditions": {
		"CreateTgwAttachSubnets": {
			"Fn::Equals": [
				{
					"Ref": "TgwAttach"
				},
				"Yes"
			]
		},
		"CreateTgw": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "TgwCreation"
						},
						"Yes"
					]
				},
				{
					"Fn::Equals": [
						{
							"Ref": "TgwAttach"
						},
						"Yes"
					]
				}
			]
		},
		"ExistingTgw": {
			"Fn::And": [
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "TgwExisting"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Equals": [
						{
							"Ref": "TgwCreation"
						},
						"No"
					]
				}
			]
		},
		"CreateAttachments": {
			"Fn::Or": [
				{
					"Condition": "CreateTgw"
				},
				{
					"Condition": "ExistingTgw"
				}
			]
		},
		"ExistingTgwRoute": {
			"Fn::And": [
				{
					"Condition": "ExistingTgw"
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "TgwExistingSpokeTgwRtbRoute"
								},
								""
							]
						}
					]
				}
			]
		},
		"FortiFlex": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "LicenseType"
						},
						"Flex"
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate1FortiFlexToken"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate2FortiFlexToken"
								},
								""
							]
						}
					]
				}
			]
		},
		"BYOL": {
			"Fn::And": [
				{
					"Fn::Equals": [
						{
							"Ref": "LicenseType"
						},
						"BYOL"
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate1LicenseFile"
								},
								""
							]
						}
					]
				},
				{
					"Fn::Not": [
						{
							"Fn::Equals": [
								{
									"Ref": "FortiGate2LicenseFile"
								},
								""
							]
						}
					]
				}
			]
		},
		"Graviton": {
			"Fn::Or": [
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c6g"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c6gn"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c7g"
					]
				},
				{
					"Fn::Equals": [
						{
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										".",
										{
											"Ref": "InstanceType"
										}
									]
								}
							]
						},
						"c7gn"
					]
				}
			]
		},
		"PrivateEC2API": {
			"Fn::Equals": [
				{
					"Ref": "OnlyPrivateEC2API"
				},
				"True"
			]
		},
		"PublicEC2API": {
			"Fn::Equals": [
				{
					"Ref": "OnlyPrivateEC2API"
				},
				"False"
			]
		}
	},
	"Resources": {
		"VPC": {
			"Type": "AWS::EC2::VPC",
			"Properties": {
				"CidrBlock": {
					"Ref": "VPCCIDR"
				},
				"EnableDnsSupport": "true",
				"EnableDnsHostnames": "true",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"VPC"
								]
							]
						}
					}
				]
			}
		},
		"PublicSub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PublicSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PublicSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"PrivateSub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PrivateSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PrivateSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"HAMgmtSub1": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "HAMgmtSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"HAMgmtSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"PublicSub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PublicSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PublicSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"PrivateSub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "PrivateSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PrivateSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"HAMgmtSub2": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "HAMgmtSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"HAMgmtSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"TgwAttachSub1": {
			"Type": "AWS::EC2::Subnet",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "TgwAttachSubnet1"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TgwAttachSubnet1"
								]
							]
						}
					}
				]
			}
		},
		"TgwAttachSub2": {
			"Type": "AWS::EC2::Subnet",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"CidrBlock": {
					"Ref": "TgwAttachSubnet2"
				},
				"AvailabilityZone": {
					"Ref": "AZForSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TgwAttachSubnet2"
								]
							]
						}
					}
				]
			}
		},
		"InternetGateway": {
			"Type": "AWS::EC2::InternetGateway",
			"Properties": {
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"IGW"
								]
							]
						}
					}
				]
			}
		},
		"AttachGateway": {
			"Type": "AWS::EC2::VPCGatewayAttachment",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"InternetGatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"TransitGateway": {
			"Type": "AWS::EC2::TransitGateway",
			"Condition": "CreateTgw",
			"Properties": {
				"AmazonSideAsn": 64512,
				"AutoAcceptSharedAttachments": "enable",
				"DefaultRouteTableAssociation": "disable",
				"DefaultRouteTablePropagation": "disable",
				"DnsSupport": "enable",
				"VpnEcmpSupport": "enable",
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TGW"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySecurityVpcAttachment": {
			"Type": "AWS::EC2::TransitGatewayAttachment",
			"Condition": "CreateTgw",
			"Properties": {
				"SubnetIds": [
					{
						"Ref": "TgwAttachSub1"
					},
					{
						"Ref": "TgwAttachSub2"
					}
				],
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"security-vpc-attachment"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySecurityRtb": {
			"Type": "AWS::EC2::TransitGatewayRouteTable",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"security-tgw-rtb"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySpokeRtb": {
			"Type": "AWS::EC2::TransitGatewayRouteTable",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"spoke-tgw-rtb"
								]
							]
						}
					}
				]
			}
		},
		"TransitGatewaySecurityVpcAttachmentAssociation": {
			"Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
			"Condition": "CreateTgw",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "TransitGatewaySecurityVpcAttachment"
				},
				"TransitGatewayRouteTableId": {
					"Ref": "TransitGatewaySecurityRtb"
				}
			}
		},
		"TransitGatewayRoute1": {
			"Type": "AWS::EC2::TransitGatewayRoute",
			"Condition": "CreateTgw",
			"DependsOn": "RunTgwApplianceMode",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "TransitGatewaySecurityVpcAttachment"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"TransitGatewayRouteTableId": {
					"Ref": "TransitGatewaySpokeRtb"
				}
			}
		},
		"PublicRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PublicRouteTable"
								]
							]
						}
					}
				]
			}
		},
		"PrivateRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"PrivateRouteTable"
								]
							]
						}
					}
				]
			}
		},
		"TgwAttachRouteTable": {
			"Type": "AWS::EC2::RouteTable",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"TgwAttachRouteTable"
								]
							]
						}
					}
				]
			}
		},
		"VPCRoute1": {
			"Type": "AWS::EC2::Route",
			"DependsOn": "AttachGateway",
			"Properties": {
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"GatewayId": {
					"Ref": "InternetGateway"
				}
			}
		},
		"VPCRoute2": {
			"Type": "AWS::EC2::Route",
			"Condition": "CreateTgwAttachSubnets",
			"DependsOn": "Fgt1Eni1",
			"Properties": {
				"RouteTableId": {
					"Ref": "TgwAttachRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"NetworkInterfaceId": {
					"Ref": "Fgt1Eni1"
				}
			}
		},
		"VPCRoute3": {
			"Type": "AWS::EC2::Route",
			"Condition": "CreateTgw",
			"DependsOn": [
				"TransitGateway",
				"TransitGatewaySecurityVpcAttachment",
				"TransitGatewaySecurityVpcAttachmentAssociation"
			],
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"TransitGatewayId": {
					"Ref": "TransitGateway"
				}
			}
		},
		"VPCRoute4": {
			"Type": "AWS::EC2::Route",
			"Condition": "ExistingTgw",
			"DependsOn": [
				"ExistingTransitGatewaySecurityVpcAttachment",
				"ExistingTransitGatewaySecurityVpcAttachmentAssociation"
			],
			"Properties": {
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				},
				"DestinationCidrBlock": "0.0.0.0/0",
				"TransitGatewayId": {
					"Ref": "TgwExisting"
				}
			}
		},
		"SubnetRouteTableAssociation1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSub1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PublicSub2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation3": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "HAMgmtSub1"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation4": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "HAMgmtSub2"
				},
				"RouteTableId": {
					"Ref": "PublicRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation5": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSub1"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation6": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"SubnetId": {
					"Ref": "PrivateSub2"
				},
				"RouteTableId": {
					"Ref": "PrivateRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation7": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"SubnetId": {
					"Ref": "TgwAttachSub1"
				},
				"RouteTableId": {
					"Ref": "TgwAttachRouteTable"
				}
			}
		},
		"SubnetRouteTableAssociation8": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Condition": "CreateTgwAttachSubnets",
			"Properties": {
				"SubnetId": {
					"Ref": "TgwAttachSub2"
				},
				"RouteTableId": {
					"Ref": "TgwAttachRouteTable"
				}
			}
		},
		"TgwApplianceMode": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Handler": "index.handler",
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"ec2 = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        response = ec2.modify_transit_gateway_vpc_attachment(",
								"                TransitGatewayAttachmentId = event['ResourceProperties']['TgwInspectionVpcAttachmentId'],",
								"                Options = {'ApplianceModeSupport': event['ResourceProperties']['ApplianceMode']}",
								"            )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if response['ResponseMetadata']['HTTPStatusCode'] == 200 and response['TransitGatewayVpcAttachment'] != []:",
								"        tgw_status = response['TransitGatewayVpcAttachment']['Options']['ApplianceModeSupport']",
								"        logger.info('--> Current Tgw Status: {}'.format(tgw_status))",
								"        responseData = {'Tgw ApplianceMode Status': tgw_status}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to modify Tgw Attachment! {}'.format(response))",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Runtime": "python3.9",
				"Timeout": 30
			}
		},
		"RunTgwApplianceMode": {
			"Type": "Custom::RunTgwApplianceMode",
			"Condition": "CreateAttachments",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"TgwApplianceMode",
						"Arn"
					]
				},
				"TgwInspectionVpcAttachmentId": {
					"Fn::If": [
						"CreateTgw",
						{
							"Ref": "TransitGatewaySecurityVpcAttachment"
						},
						{
							"Ref": "ExistingTransitGatewaySecurityVpcAttachment"
						}
					]
				},
				"ApplianceMode": "enable"
			}
		},
		"ExistingTransitGatewaySecurityVpcAttachment": {
			"Type": "AWS::EC2::TransitGatewayAttachment",
			"Condition": "ExistingTgw",
			"Properties": {
				"SubnetIds": [
					{
						"Ref": "TgwAttachSub1"
					},
					{
						"Ref": "TgwAttachSub2"
					}
				],
				"TransitGatewayId": {
					"Ref": "TgwExisting"
				},
				"VpcId": {
					"Ref": "VPC"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"-",
								[
									{
										"Ref": "AWS::StackName"
									},
									"security-vpc-attachment"
								]
							]
						}
					}
				]
			}
		},
		"ExistingTransitGatewaySecurityVpcAttachmentAssociation": {
			"Type": "AWS::EC2::TransitGatewayRouteTableAssociation",
			"Condition": "ExistingTgw",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "ExistingTransitGatewaySecurityVpcAttachment"
				},
				"TransitGatewayRouteTableId": {
					"Ref": "TgwExistingSecurityTgwRtb"
				}
			}
		},
		"ExistingTransitGatewayRoute1": {
			"Type": "AWS::EC2::TransitGatewayRoute",
			"Condition": "ExistingTgwRoute",
			"Properties": {
				"TransitGatewayAttachmentId": {
					"Ref": "ExistingTransitGatewaySecurityVpcAttachment"
				},
				"DestinationCidrBlock": {
					"Ref": "TgwExistingSpokeTgwRtbRoute"
				},
				"TransitGatewayRouteTableId": {
					"Ref": "TgwExistingSpokeTgwRtb"
				}
			}
		},
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": "*",
							"Action": [
								"s3:GetObject"
							],
							"Resource": [
								"*"
							]
						}
					]
				},
				"RouteTableIds": [
					{
						"Ref": "PublicRouteTable"
					}
				],
				"ServiceName": {
					"Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
				},
				"VpcId": {
					"Ref": "VPC"
				}
			}
		},
		"VPCEndpointEC2": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Condition": "PrivateEC2API",
			"Properties": {
				"VpcEndpointType": "Interface",
				"PrivateDnsEnabled": true,
				"VpcId": {
					"Ref": "VPC"
				},
				"SecurityGroupIds": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SubnetIds": [
					{
						"Ref": "HAMgmtSub1"
					},
					{
						"Ref": "HAMgmtSub2"
					}
				],
				"ServiceName": {
					"Fn::Join": [
						"",
						[
							"com.amazonaws.",
							{
								"Ref": "AWS::Region"
							},
							".ec2"
						]
					]
				}
			}
		},
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "FGCPPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Sid": "BootStrapFromS3",
									"Effect": "Allow",
									"Action": [
										"s3:GetObject"
									],
									"Resource": "*"
								},
								{
									"Sid": "Failover",
									"Effect": "Allow",
									"Action": [
										"ec2:AssociateAddress",
										"ec2:DescribeAddresses",
										"ec2:DescribeInstances",
										"ec2:DescribeRouteTables",
										"ec2:DescribeVpcEndpoints",
										"ec2:ReplaceRoute"
									],
									"Resource": "*"
								},
								{
									"Sid": "SDNConnectorFortiView",
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeRegions",
										"eks:DescribeCluster",
										"eks:ListClusters",
										"inspector:DescribeFindings",
										"inspector:ListFindings"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FortiGateSecGrp": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPC"
				},
				"GroupDescription": "FortigateSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForInstanceAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FortiGateSecGrpHArule": {
			"DependsOn": "FortiGateSecGrp",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FortiGateSecGrp"
				},
				"Description": "Allow FGTs to access each other",
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FortiGateSecGrp"
				}
			}
		},
		"Fgt1": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "2",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "30",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1Eni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1Eni1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt1Eni2"
						},
						"DeviceIndex": "2"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiGate1"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::If": [
							"BYOL",
							{
								"Fn::Join": [
									"",
									[
										"{\n",
										"\"bucket\"",
										" : \"",
										{
											"Ref": "InitS3Bucket"
										},
										"\"",
										",\n",
										"\"region\"",
										" : ",
										"\"",
										{
											"Ref": "AWS::Region"
										},
										"\"",
										",\n",
										"\"license\"",
										" : ",
										"\"",
										"/",
										{
											"Ref": "FortiGate1LicenseFile"
										},
										"\"",
										",\n",
										"\"config\"",
										" : ",
										"\"",
										"/fgt1.txt\"",
										"\n",
										"}"
									]
								]
							},
							{
								"Fn::Join": [
									"\n",
									[
										"Content-Type: multipart/mixed; boundary='==Boundary=='",
										"MIME-Version: 1.0",
										"",
										"--==Boundary==",
										"Content-Type: text/x-shellscript; charset='us-ascii'",
										"MIME-Version: 1.0",
										"",
										"config system vdom-exception",
										"edit 1",
										"set object system.interface",
										"next",
										"edit 2",
										"set object router.static",
										"next",
										"end",
										"config system settings",
										"set allow-subnet-overlap enable",
										"end",
										"config system global",
										"set hostname Fgt1",
										"set admintimeout 60",
										"end",
										{
											"Fn::If": [
												"PrivateEC2API",
												{
													"Fn::Join": [
														"\n",
														[
															"config system dns",
															"set primary 169.254.169.253",
															"unset secondary",
															"unset protocol",
															"unset server-select-method",
															"end"
														]
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"config system interface",
										"edit port1",
										"set alias public",
										"set mode static",
										{
											"Fn::Sub": "set ip ${FortiGate1PublicIP}"
										},
										"set allowaccess ping https ssh fgfm",
										"set secondary-IP enable",
										"next",
										"edit port2",
										"set alias private",
										"set mode static",
										{
											"Fn::Sub": "set ip ${FortiGate1PrivateIP}"
										},
										"set allowaccess ping https ssh",
										"set mtu-override enable",
										"set mtu 9001",
										"next",
										"edit port3",
										"set alias hamgmt",
										"set mode static",
										{
											"Fn::Sub": "set ip ${FortiGate1HAmgmtIP}"
										},
										"set allowaccess ping https ssh",
										"set mtu-override enable",
										"set mtu 9001",
										"next",
										"end",
										"config router static",
										"edit 1",
										"set device port1",
										{
											"Fn::Sub": "set gateway ${PublicSubnet1RouterIP}"
										},
										"next",
										"edit 2",
										{
											"Fn::Sub": "set dst ${VPCCIDR}"
										},
										"set device port2",
										{
											"Fn::Sub": "set gateway ${PrivateSubnet1RouterIP}"
										},
										"next",
										"end",
										"config firewall policy",
										"edit 1",
										"set name outbound-all",
										"set srcintf port2",
										"set dstintf port1",
										"set srcaddr all",
										"set dstaddr all",
										"set action accept",
										"set schedule always",
										"set service ALL",
										"set logtraffic all",
										"set nat enable",
										"next",
										"end",
										"config system sdn-connector",
										"edit aws-instance-role",
										"set status enable",
										"set type aws",
										"set use-metadata-iam enable",
										"next",
										"end",
										"config system ha",
										"set group-name group1",
										"set mode a-p",
										"set hbdev port3 50",
										"set session-pickup enable",
										"set ha-mgmt-status enable",
										"config ha-mgmt-interface",
										"edit 1",
										"set interface port3",
										{
											"Fn::Sub": "set gateway ${HAMgmtSubnet1RouterIP}"
										},
										"next",
										"end",
										"set override disable",
										"set priority 255",
										"set unicast-hb enable",
										{
											"Fn::Join": [
												"",
												[
													"set unicast-hb-peerip ",
													{
														"Fn::Select": [
															"0",
															{
																"Fn::Split": [
																	"/",
																	{
																		"Ref": "FortiGate2HAmgmtIP"
																	}
																]
															}
														]
													}
												]
											]
										},
										"end",
										"",
										{
											"Fn::If": [
												"FortiFlex",
												{
													"Fn::Join": [
														"\n",
														[
															"--==Boundary==",
															"Content-Type: text/plain; charset='us-ascii'",
															"MIME-Version: 1.0",
															"Content-Transfer-Encoding: 7bit",
															"Content-Disposition: attachment; filename='license'",
															"",
															{
																"Fn::Sub": "LICENSE-TOKEN: ${FortiGate1FortiFlexToken}"
															},
															""
														]
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"--==Boundary==--"
									]
								]
							}
						]
					}
				}
			}
		},
		"Fgt2": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::GetAtt": [
						"RunImageFunction",
						"ami"
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "2",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					},
					{
						"DeviceName": "/dev/sdb",
						"Ebs": {
							"VolumeType": "gp2",
							"VolumeSize": "30",
							"DeleteOnTermination": "true",
							"Encrypted": {
								"Ref": "EncryptVolumes"
							}
						}
					}
				],
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2Eni0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2Eni1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "Fgt2Eni2"
						},
						"DeviceIndex": "2"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FortiGate2"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::If": [
							"BYOL",
							{
								"Fn::Join": [
									"",
									[
										"{\n",
										"\"bucket\"",
										" : \"",
										{
											"Ref": "InitS3Bucket"
										},
										"\"",
										",\n",
										"\"region\"",
										" : ",
										"\"",
										{
											"Ref": "AWS::Region"
										},
										"\"",
										",\n",
										"\"license\"",
										" : ",
										"\"",
										"/",
										{
											"Ref": "FortiGate2LicenseFile"
										},
										"\"",
										",\n",
										"\"config\"",
										" : ",
										"\"",
										"/fgt2.txt\"",
										"\n",
										"}"
									]
								]
							},
							{
								"Fn::Join": [
									"\n",
									[
										"Content-Type: multipart/mixed; boundary='==Boundary=='",
										"MIME-Version: 1.0",
										"",
										"--==Boundary==",
										"Content-Type: text/x-shellscript; charset='us-ascii'",
										"MIME-Version: 1.0",
										"",
										"config system vdom-exception",
										"edit 1",
										"set object system.interface",
										"next",
										"edit 2",
										"set object router.static",
										"next",
										"end",
										"config system settings",
										"set allow-subnet-overlap enable",
										"end",
										"config system global",
										"set hostname Fgt2",
										"set admintimeout 60",
										"end",
										{
											"Fn::If": [
												"PrivateEC2API",
												{
													"Fn::Join": [
														"\n",
														[
															"config system dns",
															"set primary 169.254.169.253",
															"unset secondary",
															"unset protocol",
															"unset server-select-method",
															"end"
														]
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"config system interface",
										"edit port1",
										"set alias public",
										"set mode static",
										{
											"Fn::Sub": "set ip ${FortiGate2PublicIP}"
										},
										"set allowaccess ping https ssh fgfm",
										"set secondary-IP enable",
										"next",
										"edit port2",
										"set alias private",
										"set mode static",
										{
											"Fn::Sub": "set ip ${FortiGate2PrivateIP}"
										},
										"set allowaccess ping https ssh",
										"set mtu-override enable",
										"set mtu 9001",
										"next",
										"edit port3",
										"set alias hamgmt",
										"set mode static",
										{
											"Fn::Sub": "set ip ${FortiGate2HAmgmtIP}"
										},
										"set allowaccess ping https ssh",
										"set mtu-override enable",
										"set mtu 9001",
										"next",
										"end",
										"config router static",
										"edit 1",
										"set device port1",
										{
											"Fn::Sub": "set gateway ${PublicSubnet2RouterIP}"
										},
										"next",
										"edit 2",
										{
											"Fn::Sub": "set dst ${VPCCIDR}"
										},
										"set device port2",
										{
											"Fn::Sub": "set gateway ${PrivateSubnet2RouterIP}"
										},
										"next",
										"end",
										"config firewall policy",
										"edit 1",
										"set name outbound-all",
										"set srcintf port2",
										"set dstintf port1",
										"set srcaddr all",
										"set dstaddr all",
										"set action accept",
										"set schedule always",
										"set service ALL",
										"set logtraffic all",
										"set nat enable",
										"next",
										"end",
										"config system sdn-connector",
										"edit aws-instance-role",
										"set status enable",
										"set type aws",
										"set use-metadata-iam enable",
										"next",
										"end",
										"config system ha",
										"set group-name group1",
										"set mode a-p",
										"set hbdev port3 50",
										"set session-pickup enable",
										"set ha-mgmt-status enable",
										"config ha-mgmt-interface",
										"edit 1",
										"set interface port3",
										{
											"Fn::Sub": "set gateway ${HAMgmtSubnet2RouterIP}"
										},
										"next",
										"end",
										"set override disable",
										"set priority 1",
										"set unicast-hb enable",
										{
											"Fn::Join": [
												"",
												[
													"set unicast-hb-peerip ",
													{
														"Fn::Select": [
															"0",
															{
																"Fn::Split": [
																	"/",
																	{
																		"Ref": "FortiGate1HAmgmtIP"
																	}
																]
															}
														]
													}
												]
											]
										},
										"end",
										"",
										{
											"Fn::If": [
												"FortiFlex",
												{
													"Fn::Join": [
														"\n",
														[
															"--==Boundary==",
															"Content-Type: text/plain; charset='us-ascii'",
															"MIME-Version: 1.0",
															"Content-Transfer-Encoding: 7bit",
															"Content-Disposition: attachment; filename='license'",
															"",
															{
																"Fn::Sub": "LICENSE-TOKEN: ${FortiGate2FortiFlexToken}"
															},
															""
														]
													]
												},
												{
													"Ref": "AWS::NoValue"
												}
											]
										},
										"--==Boundary==--"
									]
								]
							}
						]
					}
				}
			}
		},
		"Fgt1Eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGate1PublicIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"Fgt2Eni0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt2eni0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				],
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGate2PublicIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				]
			}
		},
		"ClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"Fgt1EIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "PublicEC2API",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"Fgt2EIP": {
			"Type": "AWS::EC2::EIP",
			"Condition": "PublicEC2API",
			"Properties": {
				"Domain": "vpc"
			}
		},
		"ClusterIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"ClusterEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt1Eni0"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1PublicIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": "ClusterEIP"
		},
		"Fgt1Eni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni1"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1PrivateIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt2Eni1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt2eni1"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate2PrivateIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt1Eni2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAMgmtSub1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt1eni2"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1HAmgmtIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt2Eni2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FortiGateSecGrp"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HAMgmtSub2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-fgt2eni2"
								]
							]
						}
					}
				],
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate2HAmgmtIP"
								}
							]
						}
					]
				}
			}
		},
		"Fgt1EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "PublicEC2API",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"Fgt1EIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt1Eni2"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate1HAmgmtIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": "Fgt1EIP"
		},
		"Fgt2EIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Condition": "PublicEC2API",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"Fgt2EIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "Fgt2Eni2"
				},
				"PrivateIpAddress": {
					"Fn::Select": [
						"0",
						{
							"Fn::Split": [
								"/",
								{
									"Ref": "FortiGate2HAmgmtIP"
								}
							]
						}
					]
				}
			},
			"DependsOn": "Fgt2EIP"
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3AccessRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:DescribeImages",
										"ec2:DescribeNetworkInterfaces",
										"ec2:DescribeTransitGatewayVpcAttachments",
										"ec2:DescribeVpcEndpointServiceConfigurations",
										"ec2:DescribeVpcEndpointServicePermissions",
										"ec2:DescribeVpcEndpointServices",
										"ec2:ModifyTransitGatewayVpcAttachment",
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents",
										"s3:PutObject"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"ImageFunction": {
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import boto3",
								"import cfnresponse",
								"import logging",
								"import json",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"client = boto3.client('ec2')",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        if event['ResourceProperties']['Graviton'] == 'True':",
								"            searchString = event['ResourceProperties']['SearchString2']",
								"        else:",
								"            searchString = event['ResourceProperties']['SearchString1']",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = client.describe_images(",
								"            Filters=[{'Name': 'name', 'Values': [searchString]}],",
								"            Owners=['aws-marketplace']",
								"        )",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200 and resp['Images'] != []:",
								"        ami_dict = {}",
								"        ami_list = []",
								"        for entry in resp['Images']:",
								"            key = entry['CreationDate']",
								"            ami_dict[key] = entry['ImageId']",
								"        ami_list = sorted(ami_dict, reverse = True)",
								"        logger.info('--> found latest AMI: {}, {}, {}'.format(ami_dict[ami_list[0]], ami_list[0], searchString))",
								"        responseData = {'ami': ami_dict[ami_list[0]]}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        logger.error('!!--> Unable to find AMI {} in describe_images response! {}'.format(searchString,resp))",
								"        responseData = {'msg':'Unable to find AMI {} in describe_images response! {}'.format(searchString,resp)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunImageFunction": {
			"Type": "Custom::ImageFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"ImageFunction",
						"Arn"
					]
				},
				"Graviton": {
					"Fn::If": [
						"Graviton",
						"True",
						"False"
					]
				},
				"SearchString1": {
					"Fn::FindInMap": [
						"FortiOSIntelAMISearchString",
						{
							"Ref": "FortiOSVersion"
						},
						{
							"Ref": "LicenseType"
						}
					]
				},
				"SearchString2": {
					"Fn::FindInMap": [
						"FortiOSArmAMISearchString",
						{
							"Ref": "FortiOSVersion"
						},
						{
							"Ref": "LicenseType"
						}
					]
				}
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"Condition": "BYOL",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"logger = logging.getLogger()",
								"logger.setLevel(logging.INFO)",
								"s3 = boto3.client('s3')",
								"",
								"template = '''\\",
								"config system vdom-exception",
								"edit 1",
								"set object system.interface",
								"next",
								"edit 2",
								"set object router.static",
								"next",
								"end",
								"config system settings",
								"set allow-subnet-overlap enable",
								"end",
								"config system global",
								"set hostname {Hostname}",
								"set admintimeout 60",
								"end",
								{
									"Fn::If": [
										"PrivateEC2API",
										{
											"Fn::Join": [
												"\n",
												[
													"config system dns",
													"set primary 169.254.169.253",
													"unset secondary",
													"unset protocol",
													"unset server-select-method",
													"end"
												]
											]
										},
										{
											"Ref": "AWS::NoValue"
										}
									]
								},
								"config system interface",
								"edit port1",
								"set alias public",
								"set mode static",
								"set ip {Port1IP}",
								"set allowaccess ping https ssh fgfm",
								"set secondary-IP enable",
								"next",
								"edit port2",
								"set alias private",
								"set mode static",
								"set ip {Port2IP}",
								"set allowaccess ping https ssh",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"edit port3",
								"set alias hamgmt",
								"set mode static",
								"set ip {Port3IP}",
								"set allowaccess ping https ssh",
								"set mtu-override enable",
								"set mtu 9001",
								"next",
								"end",
								"config router static",
								"edit 1",
								"set device port1",
								"set gateway {PublicSubnetRouterIP}",
								"next",
								"edit 2",
								"set dst {VPCCIDR}",
								"set device port2",
								"set gateway {PrivateSubnetRouterIP}",
								"next",
								"end",
								"config firewall policy",
								"edit 1",
								"set name outbound-all",
								"set srcintf port2",
								"set dstintf port1",
								"set srcaddr all",
								"set dstaddr all",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set logtraffic all",
								"set nat enable",
								"next",
								"end",
								"config system sdn-connector",
								"edit aws-instance-role",
								"set status enable",
								"set type aws",
								"set use-metadata-iam enable",
								"next",
								"end",
								"config system ha",
								"set group-name group1",
								"set mode a-p",
								"set hbdev port3 50",
								"set session-pickup enable",
								"set ha-mgmt-status enable",
								"config ha-mgmt-interface",
								"edit 1",
								"set interface port3",
								"set gateway {HAmgmtSubnetRouterIP}",
								"next",
								"end",
								"set override disable",
								"set priority {HApriority}",
								"set unicast-hb enable",
								"set unicast-hb-peerip {HApeer}",
								"end",
								"\\",
								"'''",
								"",
								"def handler(event, context):",
								"    if event['RequestType'] == 'Create':",
								"        logger.info('<-- event received: {}'.format(json.dumps(event)))",
								"        dict1 = ast.literal_eval(event['ResourceProperties']['FGT1Info'])",
								"        dict2 = ast.literal_eval(event['ResourceProperties']['FGT2Info'])",
								"        fgt1_conf = template.format(**dict1)",
								"        fgt2_conf = template.format(**dict2)",
								"        fgt1_result = False",
								"        fgt2_result = False",
								"    else:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"        return None",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgt1_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt1.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"        return None",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgt1_result = True",
								"        logger.info('<-- s3 put_object fgt1.txt successful')",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgt2_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgt2.txt')",
								"    except Exception as error:",
								"        logger.error('<--!! Exception: {}'.format(error))",
								"        responseData = {'msg':'Exception: {}'.format(error)}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"        return None",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgt2_result = True",
								"        logger.info('<-- s3 put_object fgt2.txt successful')",
								"",
								"    if fgt1_result is True and fgt2_result is True:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.9",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"Condition": "BYOL",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FGT1Info": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAmgmtSubnetRouterIP':'",
							{
								"Ref": "HAMgmtSubnet1RouterIP"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnet1RouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnet1RouterIP"
							},
							"',",
							"'Port1IP':'",
							{
								"Ref": "FortiGate1PublicIP"
							},
							"',",
							"'Port2IP':'",
							{
								"Ref": "FortiGate1PrivateIP"
							},
							"',",
							"'Port3IP':'",
							{
								"Ref": "FortiGate1HAmgmtIP"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiGate2HAmgmtIP"
											}
										]
									}
								]
							},
							"',",
							"'HApriority':'255',",
							"'Hostname':'Fgt1'",
							"}"
						]
					]
				},
				"FGT2Info": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAmgmtSubnetRouterIP':'",
							{
								"Ref": "HAMgmtSubnet2RouterIP"
							},
							"',",
							"'PublicSubnetRouterIP':'",
							{
								"Ref": "PublicSubnet2RouterIP"
							},
							"',",
							"'PrivateSubnetRouterIP':'",
							{
								"Ref": "PrivateSubnet2RouterIP"
							},
							"',",
							"'Port1IP':'",
							{
								"Ref": "FortiGate2PublicIP"
							},
							"',",
							"'Port2IP':'",
							{
								"Ref": "FortiGate2PrivateIP"
							},
							"',",
							"'Port3IP':'",
							{
								"Ref": "FortiGate2HAmgmtIP"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::Select": [
									"0",
									{
										"Fn::Split": [
											"/",
											{
												"Ref": "FortiGate1HAmgmtIP"
											}
										]
									}
								]
							},
							"',",
							"'HApriority':'1',",
							"'Hostname':'Fgt2'",
							"}"
						]
					]
				}
			}
		}
	},
	"Outputs": {
		"Username": {
			"Value": "admin",
			"Description": "Username for the Fortigates"
		},
		"Password": {
			"Value": {
				"Ref": "Fgt1"
			},
			"Description": "Initial password for the FortiGates"
		},
		"ClusterLoginURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "ClusterEIP"
						}
					]
				]
			},
			"Description": "Login URL for the public interface of the active FortiGate"
		},
		"FortiGate1LoginURL": {
			"Value": {
				"Fn::If": [
					"PrivateEC2API",
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Fn::Select": [
										"0",
										{
											"Fn::Split": [
												"/",
												{
													"Ref": "FortiGate1HAmgmtIP"
												}
											]
										}
									]
								}
							]
						]
					},
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Ref": "Fgt1EIP"
								}
							]
						]
					}
				]
			},
			"Description": "Login URL for the HAmgmt interface of FortiGate1"
		},
		"FortiGate2LoginURL": {
			"Value": {
				"Fn::If": [
					"PrivateEC2API",
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Fn::Select": [
										"0",
										{
											"Fn::Split": [
												"/",
												{
													"Ref": "FortiGate2HAmgmtIP"
												}
											]
										}
									]
								}
							]
						]
					},
					{
						"Fn::Join": [
							"",
							[
								"https://",
								{
									"Ref": "Fgt2EIP"
								}
							]
						]
					}
				]
			},
			"Description": "Login URL for the HAmgmt interface of FortiGate2"
		},
		"TransitGateway": {
			"Value": {
				"Ref": "TransitGateway"
			},
			"Condition": "CreateTgw",
			"Description": "Transit Gateway ID, for use in spoke template"
		},
		"TransitGatewaySecurityRtb": {
			"Value": {
				"Ref": "TransitGatewaySecurityRtb"
			},
			"Condition": "CreateTgw",
			"Description": "Transit Gateway Route Table ID that the security VPC is associated to, for use in spoke template"
		},
		"TransitGatewaySpokeRtb": {
			"Value": {
				"Ref": "TransitGatewaySpokeRtb"
			},
			"Condition": "CreateTgw",
			"Description": "Transit Gateway Route Table ID that the spoke VPCs will associate to, for use in spoke template"
		},
		"ExistingTransitGateway": {
			"Value": {
				"Ref": "TgwExisting"
			},
			"Condition": "ExistingTgw",
			"Description": "Existing Transit Gateway ID, for use in spoke template"
		},
		"ExistingTransitGatewaySecurityRtb": {
			"Value": {
				"Ref": "TgwExistingSecurityTgwRtb"
			},
			"Condition": "ExistingTgw",
			"Description": "Existing Transit Gateway Route Table ID that the security VPC is associated to, for use in spoke template"
		},
		"ExistingTransitGatewaySpokeRtb": {
			"Value": {
				"Ref": "TgwExistingSpokeTgwRtb"
			},
			"Condition": "ExistingTgw",
			"Description": "Existing Transit Gateway Route Table ID that the spoke VPCs will associate to, for use in spoke template"
		}
	}
}